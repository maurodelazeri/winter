// Code generated by protoc-gen-go. DO NOT EDIT.
// source: marketdata.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Period int32

const (
	Period_PERIOD_CURRENT Period = 0
	Period_PERIOD_M1      Period = 1
	Period_PERIOD_M2      Period = 2
	Period_PERIOD_M3      Period = 3
	Period_PERIOD_M4      Period = 4
	Period_PERIOD_M5      Period = 5
	Period_PERIOD_M6      Period = 6
	Period_PERIOD_M10     Period = 7
	Period_PERIOD_M12     Period = 8
	Period_PERIOD_M15     Period = 9
	Period_PERIOD_M20     Period = 10
	Period_PERIOD_M30     Period = 11
	Period_PERIOD_H1      Period = 12
	Period_PERIOD_H2      Period = 13
	Period_PERIOD_H3      Period = 14
	Period_PERIOD_H4      Period = 15
	Period_PERIOD_H5      Period = 16
	Period_PERIOD_H6      Period = 17
	Period_PERIOD_H7      Period = 18
	Period_PERIOD_H8      Period = 19
	Period_PERIOD_H12     Period = 20
	Period_PERIOD_D1      Period = 21
	Period_PERIOD_W1      Period = 22
	Period_PERIOD_MN1     Period = 23
)

var Period_name = map[int32]string{
	0:  "PERIOD_CURRENT",
	1:  "PERIOD_M1",
	2:  "PERIOD_M2",
	3:  "PERIOD_M3",
	4:  "PERIOD_M4",
	5:  "PERIOD_M5",
	6:  "PERIOD_M6",
	7:  "PERIOD_M10",
	8:  "PERIOD_M12",
	9:  "PERIOD_M15",
	10: "PERIOD_M20",
	11: "PERIOD_M30",
	12: "PERIOD_H1",
	13: "PERIOD_H2",
	14: "PERIOD_H3",
	15: "PERIOD_H4",
	16: "PERIOD_H5",
	17: "PERIOD_H6",
	18: "PERIOD_H7",
	19: "PERIOD_H8",
	20: "PERIOD_H12",
	21: "PERIOD_D1",
	22: "PERIOD_W1",
	23: "PERIOD_MN1",
}
var Period_value = map[string]int32{
	"PERIOD_CURRENT": 0,
	"PERIOD_M1":      1,
	"PERIOD_M2":      2,
	"PERIOD_M3":      3,
	"PERIOD_M4":      4,
	"PERIOD_M5":      5,
	"PERIOD_M6":      6,
	"PERIOD_M10":     7,
	"PERIOD_M12":     8,
	"PERIOD_M15":     9,
	"PERIOD_M20":     10,
	"PERIOD_M30":     11,
	"PERIOD_H1":      12,
	"PERIOD_H2":      13,
	"PERIOD_H3":      14,
	"PERIOD_H4":      15,
	"PERIOD_H5":      16,
	"PERIOD_H6":      17,
	"PERIOD_H7":      18,
	"PERIOD_H8":      19,
	"PERIOD_H12":     20,
	"PERIOD_D1":      21,
	"PERIOD_W1":      22,
	"PERIOD_MN1":     23,
}

func (x Period) String() string {
	return proto.EnumName(Period_name, int32(x))
}
func (Period) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_marketdata_f4207a50ba429496, []int{0}
}

type Type int32

const (
	Type_TIME   Type = 0
	Type_VOLUME Type = 1
	Type_TRADE  Type = 2
	Type_BOOK   Type = 3
)

var Type_name = map[int32]string{
	0: "TIME",
	1: "VOLUME",
	2: "TRADE",
	3: "BOOK",
}
var Type_value = map[string]int32{
	"TIME":   0,
	"VOLUME": 1,
	"TRADE":  2,
	"BOOK":   3,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_marketdata_f4207a50ba429496, []int{1}
}

type Side int32

const (
	Side_BUY  Side = 0
	Side_SELL Side = 1
)

var Side_name = map[int32]string{
	0: "BUY",
	1: "SELL",
}
var Side_value = map[string]int32{
	"BUY":  0,
	"SELL": 1,
}

func (x Side) String() string {
	return proto.EnumName(Side_name, int32(x))
}
func (Side) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_marketdata_f4207a50ba429496, []int{2}
}

type MarketDataType int32

const (
	MarketDataType_SPOT    MarketDataType = 0
	MarketDataType_FUTURES MarketDataType = 1
)

var MarketDataType_name = map[int32]string{
	0: "SPOT",
	1: "FUTURES",
}
var MarketDataType_value = map[string]int32{
	"SPOT":    0,
	"FUTURES": 1,
}

func (x MarketDataType) String() string {
	return proto.EnumName(MarketDataType_name, int32(x))
}
func (MarketDataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_marketdata_f4207a50ba429496, []int{3}
}

type Item struct {
	Amount               float64  `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Price                float64  `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Item) Reset()         { *m = Item{} }
func (m *Item) String() string { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()    {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_marketdata_f4207a50ba429496, []int{0}
}
func (m *Item) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Item.Unmarshal(m, b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Item.Marshal(b, m, deterministic)
}
func (dst *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(dst, src)
}
func (m *Item) XXX_Size() int {
	return xxx_messageInfo_Item.Size(m)
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func (m *Item) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Item) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

type Orderbook struct {
	Symbol               string         `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Timestamp            uint64         `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Levels               uint32         `protobuf:"varint,3,opt,name=levels,proto3" json:"levels,omitempty"`
	Asks                 []*Item        `protobuf:"bytes,4,rep,name=asks,proto3" json:"asks,omitempty"`
	Bids                 []*Item        `protobuf:"bytes,5,rep,name=bids,proto3" json:"bids,omitempty"`
	MarketType           MarketDataType `protobuf:"varint,6,opt,name=marketType,proto3,enum=proto.MarketDataType" json:"marketType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Orderbook) Reset()         { *m = Orderbook{} }
func (m *Orderbook) String() string { return proto.CompactTextString(m) }
func (*Orderbook) ProtoMessage()    {}
func (*Orderbook) Descriptor() ([]byte, []int) {
	return fileDescriptor_marketdata_f4207a50ba429496, []int{1}
}
func (m *Orderbook) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Orderbook.Unmarshal(m, b)
}
func (m *Orderbook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Orderbook.Marshal(b, m, deterministic)
}
func (dst *Orderbook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Orderbook.Merge(dst, src)
}
func (m *Orderbook) XXX_Size() int {
	return xxx_messageInfo_Orderbook.Size(m)
}
func (m *Orderbook) XXX_DiscardUnknown() {
	xxx_messageInfo_Orderbook.DiscardUnknown(m)
}

var xxx_messageInfo_Orderbook proto.InternalMessageInfo

func (m *Orderbook) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Orderbook) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Orderbook) GetLevels() uint32 {
	if m != nil {
		return m.Levels
	}
	return 0
}

func (m *Orderbook) GetAsks() []*Item {
	if m != nil {
		return m.Asks
	}
	return nil
}

func (m *Orderbook) GetBids() []*Item {
	if m != nil {
		return m.Bids
	}
	return nil
}

func (m *Orderbook) GetMarketType() MarketDataType {
	if m != nil {
		return m.MarketType
	}
	return MarketDataType_SPOT
}

type Candle struct {
	Symbol               string         `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Period               Period         `protobuf:"varint,2,opt,name=period,proto3,enum=proto.Period" json:"period,omitempty"`
	Open                 float64        `protobuf:"fixed64,3,opt,name=open,proto3" json:"open,omitempty"`
	High                 float64        `protobuf:"fixed64,4,opt,name=high,proto3" json:"high,omitempty"`
	Low                  float64        `protobuf:"fixed64,5,opt,name=low,proto3" json:"low,omitempty"`
	Close                float64        `protobuf:"fixed64,6,opt,name=close,proto3" json:"close,omitempty"`
	Volume               float64        `protobuf:"fixed64,7,opt,name=volume,proto3" json:"volume,omitempty"`
	Type                 Type           `protobuf:"varint,8,opt,name=type,proto3,enum=proto.Type" json:"type,omitempty"`
	MarketType           MarketDataType `protobuf:"varint,9,opt,name=marketType,proto3,enum=proto.MarketDataType" json:"marketType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Candle) Reset()         { *m = Candle{} }
func (m *Candle) String() string { return proto.CompactTextString(m) }
func (*Candle) ProtoMessage()    {}
func (*Candle) Descriptor() ([]byte, []int) {
	return fileDescriptor_marketdata_f4207a50ba429496, []int{2}
}
func (m *Candle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Candle.Unmarshal(m, b)
}
func (m *Candle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Candle.Marshal(b, m, deterministic)
}
func (dst *Candle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Candle.Merge(dst, src)
}
func (m *Candle) XXX_Size() int {
	return xxx_messageInfo_Candle.Size(m)
}
func (m *Candle) XXX_DiscardUnknown() {
	xxx_messageInfo_Candle.DiscardUnknown(m)
}

var xxx_messageInfo_Candle proto.InternalMessageInfo

func (m *Candle) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Candle) GetPeriod() Period {
	if m != nil {
		return m.Period
	}
	return Period_PERIOD_CURRENT
}

func (m *Candle) GetOpen() float64 {
	if m != nil {
		return m.Open
	}
	return 0
}

func (m *Candle) GetHigh() float64 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *Candle) GetLow() float64 {
	if m != nil {
		return m.Low
	}
	return 0
}

func (m *Candle) GetClose() float64 {
	if m != nil {
		return m.Close
	}
	return 0
}

func (m *Candle) GetVolume() float64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *Candle) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_TIME
}

func (m *Candle) GetMarketType() MarketDataType {
	if m != nil {
		return m.MarketType
	}
	return MarketDataType_SPOT
}

type Trade struct {
	Symbol               string         `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Timestamp            uint64         `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Price                float64        `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`
	Size                 float64        `protobuf:"fixed64,4,opt,name=size,proto3" json:"size,omitempty"`
	Side                 Side           `protobuf:"varint,5,opt,name=side,proto3,enum=proto.Side" json:"side,omitempty"`
	MarketType           MarketDataType `protobuf:"varint,6,opt,name=marketType,proto3,enum=proto.MarketDataType" json:"marketType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Trade) Reset()         { *m = Trade{} }
func (m *Trade) String() string { return proto.CompactTextString(m) }
func (*Trade) ProtoMessage()    {}
func (*Trade) Descriptor() ([]byte, []int) {
	return fileDescriptor_marketdata_f4207a50ba429496, []int{3}
}
func (m *Trade) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trade.Unmarshal(m, b)
}
func (m *Trade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trade.Marshal(b, m, deterministic)
}
func (dst *Trade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trade.Merge(dst, src)
}
func (m *Trade) XXX_Size() int {
	return xxx_messageInfo_Trade.Size(m)
}
func (m *Trade) XXX_DiscardUnknown() {
	xxx_messageInfo_Trade.DiscardUnknown(m)
}

var xxx_messageInfo_Trade proto.InternalMessageInfo

func (m *Trade) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Trade) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Trade) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Trade) GetSize() float64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Trade) GetSide() Side {
	if m != nil {
		return m.Side
	}
	return Side_BUY
}

func (m *Trade) GetMarketType() MarketDataType {
	if m != nil {
		return m.MarketType
	}
	return MarketDataType_SPOT
}

type Ticker struct {
	Symbol               string         `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Timestamp            uint64         `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Price                float64        `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`
	Side                 Side           `protobuf:"varint,4,opt,name=side,proto3,enum=proto.Side" json:"side,omitempty"`
	BestBid              float64        `protobuf:"fixed64,5,opt,name=best_bid,json=bestBid,proto3" json:"best_bid,omitempty"`
	BestAsk              float64        `protobuf:"fixed64,6,opt,name=best_ask,json=bestAsk,proto3" json:"best_ask,omitempty"`
	MarketType           MarketDataType `protobuf:"varint,7,opt,name=marketType,proto3,enum=proto.MarketDataType" json:"marketType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Ticker) Reset()         { *m = Ticker{} }
func (m *Ticker) String() string { return proto.CompactTextString(m) }
func (*Ticker) ProtoMessage()    {}
func (*Ticker) Descriptor() ([]byte, []int) {
	return fileDescriptor_marketdata_f4207a50ba429496, []int{4}
}
func (m *Ticker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ticker.Unmarshal(m, b)
}
func (m *Ticker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ticker.Marshal(b, m, deterministic)
}
func (dst *Ticker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ticker.Merge(dst, src)
}
func (m *Ticker) XXX_Size() int {
	return xxx_messageInfo_Ticker.Size(m)
}
func (m *Ticker) XXX_DiscardUnknown() {
	xxx_messageInfo_Ticker.DiscardUnknown(m)
}

var xxx_messageInfo_Ticker proto.InternalMessageInfo

func (m *Ticker) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Ticker) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Ticker) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Ticker) GetSide() Side {
	if m != nil {
		return m.Side
	}
	return Side_BUY
}

func (m *Ticker) GetBestBid() float64 {
	if m != nil {
		return m.BestBid
	}
	return 0
}

func (m *Ticker) GetBestAsk() float64 {
	if m != nil {
		return m.BestAsk
	}
	return 0
}

func (m *Ticker) GetMarketType() MarketDataType {
	if m != nil {
		return m.MarketType
	}
	return MarketDataType_SPOT
}

func init() {
	proto.RegisterType((*Item)(nil), "proto.Item")
	proto.RegisterType((*Orderbook)(nil), "proto.Orderbook")
	proto.RegisterType((*Candle)(nil), "proto.Candle")
	proto.RegisterType((*Trade)(nil), "proto.Trade")
	proto.RegisterType((*Ticker)(nil), "proto.Ticker")
	proto.RegisterEnum("proto.Period", Period_name, Period_value)
	proto.RegisterEnum("proto.Type", Type_name, Type_value)
	proto.RegisterEnum("proto.Side", Side_name, Side_value)
	proto.RegisterEnum("proto.MarketDataType", MarketDataType_name, MarketDataType_value)
}

func init() { proto.RegisterFile("marketdata.proto", fileDescriptor_marketdata_f4207a50ba429496) }

var fileDescriptor_marketdata_f4207a50ba429496 = []byte{
	// 641 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xdf, 0x4e, 0xdb, 0x48,
	0x14, 0xc6, 0x99, 0xf8, 0x4f, 0xe2, 0x93, 0x4d, 0xf6, 0xec, 0x2c, 0xb0, 0x46, 0x5a, 0xa9, 0x11,
	0x52, 0xd5, 0x28, 0x17, 0x08, 0x3b, 0x84, 0xf6, 0x16, 0x88, 0x2b, 0x50, 0x09, 0x89, 0x06, 0xa7,
	0x55, 0xaf, 0x90, 0x83, 0x47, 0xc5, 0x8a, 0x8d, 0x23, 0xdb, 0x50, 0xd1, 0x17, 0xe8, 0x63, 0xf5,
	0x1d, 0xfa, 0x08, 0x7d, 0x8e, 0x5e, 0x54, 0x33, 0x76, 0x60, 0x40, 0x45, 0x42, 0xa8, 0x57, 0x9e,
	0xdf, 0xf9, 0x66, 0xac, 0xef, 0x3b, 0xe7, 0x00, 0x26, 0x41, 0x36, 0xe7, 0x45, 0x18, 0x14, 0xc1,
	0xd6, 0x22, 0x4b, 0x8b, 0x94, 0x1a, 0xf2, 0xb3, 0xb9, 0x03, 0xfa, 0x51, 0xc1, 0x13, 0xba, 0x0e,
	0x66, 0x90, 0xa4, 0x57, 0x97, 0x85, 0x4d, 0x3a, 0xa4, 0x4b, 0x58, 0x45, 0x74, 0x15, 0x8c, 0x45,
	0x16, 0x9d, 0x73, 0xbb, 0x26, 0xcb, 0x25, 0x6c, 0x7e, 0x27, 0x60, 0x8d, 0xb3, 0x90, 0x67, 0xb3,
	0x34, 0x9d, 0x8b, 0xb7, 0xf9, 0x4d, 0x32, 0x4b, 0x63, 0xf9, 0xd6, 0x62, 0x15, 0xd1, 0xff, 0xc1,
	0x2a, 0xa2, 0x84, 0xe7, 0x45, 0x90, 0x2c, 0xe4, 0x7b, 0x9d, 0xdd, 0x15, 0xc4, 0xab, 0x98, 0x5f,
	0xf3, 0x38, 0xb7, 0xb5, 0x0e, 0xe9, 0xb6, 0x58, 0x45, 0xf4, 0x05, 0xe8, 0x41, 0x3e, 0xcf, 0x6d,
	0xbd, 0xa3, 0x75, 0x9b, 0x6e, 0xb3, 0xb4, 0xbb, 0x25, 0x4c, 0x32, 0x29, 0x88, 0x0b, 0xb3, 0x28,
	0xcc, 0x6d, 0xe3, 0x37, 0x17, 0x84, 0x40, 0x07, 0x00, 0x65, 0x5c, 0xff, 0x66, 0xc1, 0x6d, 0xb3,
	0x43, 0xba, 0x6d, 0x77, 0xad, 0xba, 0x36, 0x92, 0xc2, 0x30, 0x28, 0x02, 0x21, 0x32, 0xe5, 0xe2,
	0xe6, 0xd7, 0x1a, 0x98, 0x07, 0xc1, 0x65, 0x18, 0xf3, 0x47, 0x13, 0xbd, 0x04, 0x73, 0xc1, 0xb3,
	0x28, 0x0d, 0x65, 0x9c, 0xb6, 0xdb, 0xaa, 0xfe, 0x3a, 0x91, 0x45, 0x56, 0x89, 0x94, 0x82, 0x9e,
	0x2e, 0xf8, 0xa5, 0x0c, 0x46, 0x98, 0x3c, 0x8b, 0xda, 0x45, 0xf4, 0xe9, 0xc2, 0xd6, 0xcb, 0x9a,
	0x38, 0x53, 0x04, 0x2d, 0x4e, 0x3f, 0xdb, 0x86, 0x2c, 0x89, 0xa3, 0x68, 0xf7, 0x79, 0x9c, 0xe6,
	0xa5, 0x6b, 0xc2, 0x4a, 0x10, 0x76, 0xae, 0xd3, 0xf8, 0x2a, 0xe1, 0x76, 0xbd, 0x1c, 0x4e, 0x49,
	0xa2, 0x13, 0x85, 0x88, 0xd8, 0x90, 0x66, 0x96, 0x9d, 0x90, 0xc1, 0xa4, 0xf0, 0xa0, 0x13, 0xd6,
	0x53, 0x3b, 0xf1, 0x8d, 0x80, 0xe1, 0x67, 0x41, 0xc8, 0x9f, 0x39, 0xda, 0xdb, 0xa5, 0xd1, 0x94,
	0xa5, 0x11, 0x1d, 0xc8, 0xa3, 0x2f, 0x7c, 0xd9, 0x01, 0x71, 0x16, 0x09, 0xf2, 0x28, 0xe4, 0xb2,
	0x05, 0x77, 0x09, 0x4e, 0xa3, 0x90, 0x33, 0x29, 0x3c, 0x77, 0x96, 0x3f, 0x08, 0x98, 0x7e, 0x74,
	0x3e, 0xe7, 0xd9, 0x1f, 0x8d, 0xb0, 0xb4, 0xab, 0x3f, 0x66, 0x77, 0x03, 0x1a, 0x33, 0x9e, 0x17,
	0x67, 0xb3, 0x28, 0xac, 0xc6, 0x5a, 0x17, 0xbc, 0x1f, 0x85, 0xb7, 0x52, 0x90, 0xcf, 0xab, 0xe9,
	0x4a, 0x69, 0x2f, 0x9f, 0x3f, 0x08, 0x59, 0x7f, 0x62, 0xc8, 0xde, 0xcf, 0x1a, 0x98, 0x93, 0xe5,
	0xc6, 0xb5, 0x27, 0x1e, 0x3b, 0x1a, 0x0f, 0xcf, 0x0e, 0xa6, 0x8c, 0x79, 0x27, 0x3e, 0xae, 0xd0,
	0x16, 0x58, 0x55, 0x6d, 0xe4, 0x20, 0x51, 0xd1, 0xc5, 0x9a, 0x8a, 0x7d, 0xd4, 0x54, 0xdc, 0x41,
	0x5d, 0xc5, 0x01, 0x1a, 0x2a, 0xee, 0xa2, 0x49, 0xdb, 0x00, 0xb7, 0x7f, 0xde, 0xc6, 0xfa, 0x3d,
	0x76, 0xb1, 0x71, 0x8f, 0x07, 0x68, 0xa9, 0xec, 0x6e, 0x23, 0xa8, 0xdc, 0xdf, 0xc6, 0xa6, 0xf2,
	0xfb, 0x43, 0x07, 0xff, 0x52, 0xd1, 0xc5, 0x96, 0x8a, 0x7d, 0x6c, 0xab, 0xb8, 0x83, 0x7f, 0xab,
	0x38, 0x40, 0x54, 0x71, 0x17, 0xff, 0x51, 0xf1, 0x35, 0x52, 0x15, 0xdf, 0xe0, 0xbf, 0x8a, 0x8f,
	0x43, 0xc7, 0xc5, 0x55, 0x45, 0x1e, 0x3a, 0xb8, 0xa6, 0xe0, 0x07, 0x07, 0xd7, 0x55, 0xd7, 0x27,
	0x0e, 0xfe, 0xd7, 0x73, 0x40, 0x17, 0x63, 0xa0, 0x0d, 0xd0, 0xfd, 0xa3, 0x91, 0x87, 0x2b, 0x14,
	0xc0, 0x7c, 0x3f, 0x3e, 0x9e, 0x8e, 0x3c, 0x24, 0xd4, 0x02, 0xc3, 0x67, 0x7b, 0x43, 0x0f, 0x6b,
	0xe2, 0xc2, 0xfe, 0x78, 0xfc, 0x0e, 0xb5, 0xde, 0x06, 0xe8, 0x62, 0x59, 0x68, 0x1d, 0xb4, 0xfd,
	0xe9, 0x47, 0x5c, 0x11, 0xd2, 0xa9, 0x77, 0x7c, 0x8c, 0xa4, 0xf7, 0x0a, 0xda, 0xf7, 0x47, 0x2d,
	0xb5, 0xc9, 0x58, 0x4c, 0xb2, 0x09, 0xf5, 0xb7, 0x53, 0x7f, 0xca, 0xbc, 0x53, 0x24, 0x33, 0x53,
	0xee, 0x45, 0xff, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x60, 0x4e, 0x80, 0x0b, 0xd3, 0x05, 0x00,
	0x00,
}
