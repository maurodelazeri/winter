// Code generated by protoc-gen-go. DO NOT EDIT.
// source: marketdata.proto

package marketdata

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Period int32

const (
	Period_PERIOD_CURRENT Period = 0
	Period_PERIOD_M1      Period = 1
	Period_PERIOD_M2      Period = 2
	Period_PERIOD_M3      Period = 3
	Period_PERIOD_M4      Period = 4
	Period_PERIOD_M5      Period = 5
	Period_PERIOD_M6      Period = 6
	Period_PERIOD_M10     Period = 7
	Period_PERIOD_M12     Period = 8
	Period_PERIOD_M15     Period = 9
	Period_PERIOD_M20     Period = 10
	Period_PERIOD_M30     Period = 11
	Period_PERIOD_H1      Period = 12
	Period_PERIOD_H2      Period = 13
	Period_PERIOD_H3      Period = 14
	Period_PERIOD_H4      Period = 15
	Period_PERIOD_H5      Period = 16
	Period_PERIOD_H6      Period = 17
	Period_PERIOD_H7      Period = 18
	Period_PERIOD_H8      Period = 19
	Period_PERIOD_H12     Period = 20
	Period_PERIOD_D1      Period = 21
	Period_PERIOD_W1      Period = 22
	Period_PERIOD_MN1     Period = 23
)

var Period_name = map[int32]string{
	0:  "PERIOD_CURRENT",
	1:  "PERIOD_M1",
	2:  "PERIOD_M2",
	3:  "PERIOD_M3",
	4:  "PERIOD_M4",
	5:  "PERIOD_M5",
	6:  "PERIOD_M6",
	7:  "PERIOD_M10",
	8:  "PERIOD_M12",
	9:  "PERIOD_M15",
	10: "PERIOD_M20",
	11: "PERIOD_M30",
	12: "PERIOD_H1",
	13: "PERIOD_H2",
	14: "PERIOD_H3",
	15: "PERIOD_H4",
	16: "PERIOD_H5",
	17: "PERIOD_H6",
	18: "PERIOD_H7",
	19: "PERIOD_H8",
	20: "PERIOD_H12",
	21: "PERIOD_D1",
	22: "PERIOD_W1",
	23: "PERIOD_MN1",
}
var Period_value = map[string]int32{
	"PERIOD_CURRENT": 0,
	"PERIOD_M1":      1,
	"PERIOD_M2":      2,
	"PERIOD_M3":      3,
	"PERIOD_M4":      4,
	"PERIOD_M5":      5,
	"PERIOD_M6":      6,
	"PERIOD_M10":     7,
	"PERIOD_M12":     8,
	"PERIOD_M15":     9,
	"PERIOD_M20":     10,
	"PERIOD_M30":     11,
	"PERIOD_H1":      12,
	"PERIOD_H2":      13,
	"PERIOD_H3":      14,
	"PERIOD_H4":      15,
	"PERIOD_H5":      16,
	"PERIOD_H6":      17,
	"PERIOD_H7":      18,
	"PERIOD_H8":      19,
	"PERIOD_H12":     20,
	"PERIOD_D1":      21,
	"PERIOD_W1":      22,
	"PERIOD_MN1":     23,
}

func (x Period) String() string {
	return proto.EnumName(Period_name, int32(x))
}
func (Period) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_marketdata_a9ec38ab3d6fcd69, []int{0}
}

type CandleType int32

const (
	CandleType_VOLUME CandleType = 0
	CandleType_TRADE  CandleType = 2
	CandleType_BOOK   CandleType = 3
)

var CandleType_name = map[int32]string{
	0: "VOLUME",
	2: "TRADE",
	3: "BOOK",
}
var CandleType_value = map[string]int32{
	"VOLUME": 0,
	"TRADE":  2,
	"BOOK":   3,
}

func (x CandleType) String() string {
	return proto.EnumName(CandleType_name, int32(x))
}
func (CandleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_marketdata_a9ec38ab3d6fcd69, []int{1}
}

type OrderSide int32

const (
	OrderSide_BUY  OrderSide = 0
	OrderSide_SELL OrderSide = 1
)

var OrderSide_name = map[int32]string{
	0: "BUY",
	1: "SELL",
}
var OrderSide_value = map[string]int32{
	"BUY":  0,
	"SELL": 1,
}

func (x OrderSide) String() string {
	return proto.EnumName(OrderSide_name, int32(x))
}
func (OrderSide) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_marketdata_a9ec38ab3d6fcd69, []int{2}
}

type Venue int32

const (
	Venue_DARKPOOL    Venue = 0
	Venue_COINBASEPRO Venue = 1
	Venue_BINANCE     Venue = 2
	Venue_BITFINEX    Venue = 3
	Venue_BITMEX      Venue = 4
	Venue_GEMINI      Venue = 5
)

var Venue_name = map[int32]string{
	0: "DARKPOOL",
	1: "COINBASEPRO",
	2: "BINANCE",
	3: "BITFINEX",
	4: "BITMEX",
	5: "GEMINI",
}
var Venue_value = map[string]int32{
	"DARKPOOL":    0,
	"COINBASEPRO": 1,
	"BINANCE":     2,
	"BITFINEX":    3,
	"BITMEX":      4,
	"GEMINI":      5,
}

func (x Venue) String() string {
	return proto.EnumName(Venue_name, int32(x))
}
func (Venue) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_marketdata_a9ec38ab3d6fcd69, []int{3}
}

type VenueType int32

const (
	VenueType_SPOT    VenueType = 0
	VenueType_FUTURES VenueType = 1
)

var VenueType_name = map[int32]string{
	0: "SPOT",
	1: "FUTURES",
}
var VenueType_value = map[string]int32{
	"SPOT":    0,
	"FUTURES": 1,
}

func (x VenueType) String() string {
	return proto.EnumName(VenueType_name, int32(x))
}
func (VenueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_marketdata_a9ec38ab3d6fcd69, []int{4}
}

type Symbol int32

const (
	Symbol_USD  Symbol = 0
	Symbol_BTC  Symbol = 1
	Symbol_ETH  Symbol = 2
	Symbol_BCH  Symbol = 3
	Symbol_LTC  Symbol = 4
	Symbol_EOS  Symbol = 5
	Symbol_USDT Symbol = 6
)

var Symbol_name = map[int32]string{
	0: "USD",
	1: "BTC",
	2: "ETH",
	3: "BCH",
	4: "LTC",
	5: "EOS",
	6: "USDT",
}
var Symbol_value = map[string]int32{
	"USD":  0,
	"BTC":  1,
	"ETH":  2,
	"BCH":  3,
	"LTC":  4,
	"EOS":  5,
	"USDT": 6,
}

func (x Symbol) String() string {
	return proto.EnumName(Symbol_name, int32(x))
}
func (Symbol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_marketdata_a9ec38ab3d6fcd69, []int{5}
}

type Product int32

const (
	Product_BTC_USD Product = 0
	Product_BTC_ETH Product = 1
	Product_ETH_USD Product = 2
	Product_LTC_USD Product = 3
	Product_LTC_BTC Product = 4
	Product_LTC_ETH Product = 5
	Product_BCH_USD Product = 6
	Product_BCH_BTC Product = 7
	Product_BCH_ETH Product = 8
)

var Product_name = map[int32]string{
	0: "BTC_USD",
	1: "BTC_ETH",
	2: "ETH_USD",
	3: "LTC_USD",
	4: "LTC_BTC",
	5: "LTC_ETH",
	6: "BCH_USD",
	7: "BCH_BTC",
	8: "BCH_ETH",
}
var Product_value = map[string]int32{
	"BTC_USD": 0,
	"BTC_ETH": 1,
	"ETH_USD": 2,
	"LTC_USD": 3,
	"LTC_BTC": 4,
	"LTC_ETH": 5,
	"BCH_USD": 6,
	"BCH_BTC": 7,
	"BCH_ETH": 8,
}

func (x Product) String() string {
	return proto.EnumName(Product_name, int32(x))
}
func (Product) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_marketdata_a9ec38ab3d6fcd69, []int{6}
}

type Item struct {
	Amount               float64  `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Price                float64  `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Item) Reset()         { *m = Item{} }
func (m *Item) String() string { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()    {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_marketdata_a9ec38ab3d6fcd69, []int{0}
}
func (m *Item) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Item.Unmarshal(m, b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Item.Marshal(b, m, deterministic)
}
func (dst *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(dst, src)
}
func (m *Item) XXX_Size() int {
	return xxx_messageInfo_Item.Size(m)
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func (m *Item) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Item) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

type Orderbook struct {
	Product              Product   `protobuf:"varint,1,opt,name=product,proto3,enum=marketdata.Product" json:"product,omitempty"`
	Timestamp            uint64    `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Levels               uint32    `protobuf:"varint,3,opt,name=levels,proto3" json:"levels,omitempty"`
	Asks                 []*Item   `protobuf:"bytes,4,rep,name=asks,proto3" json:"asks,omitempty"`
	Bids                 []*Item   `protobuf:"bytes,5,rep,name=bids,proto3" json:"bids,omitempty"`
	VenueType            VenueType `protobuf:"varint,6,opt,name=venue_type,json=venueType,proto3,enum=marketdata.VenueType" json:"venue_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Orderbook) Reset()         { *m = Orderbook{} }
func (m *Orderbook) String() string { return proto.CompactTextString(m) }
func (*Orderbook) ProtoMessage()    {}
func (*Orderbook) Descriptor() ([]byte, []int) {
	return fileDescriptor_marketdata_a9ec38ab3d6fcd69, []int{1}
}
func (m *Orderbook) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Orderbook.Unmarshal(m, b)
}
func (m *Orderbook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Orderbook.Marshal(b, m, deterministic)
}
func (dst *Orderbook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Orderbook.Merge(dst, src)
}
func (m *Orderbook) XXX_Size() int {
	return xxx_messageInfo_Orderbook.Size(m)
}
func (m *Orderbook) XXX_DiscardUnknown() {
	xxx_messageInfo_Orderbook.DiscardUnknown(m)
}

var xxx_messageInfo_Orderbook proto.InternalMessageInfo

func (m *Orderbook) GetProduct() Product {
	if m != nil {
		return m.Product
	}
	return Product_BTC_USD
}

func (m *Orderbook) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Orderbook) GetLevels() uint32 {
	if m != nil {
		return m.Levels
	}
	return 0
}

func (m *Orderbook) GetAsks() []*Item {
	if m != nil {
		return m.Asks
	}
	return nil
}

func (m *Orderbook) GetBids() []*Item {
	if m != nil {
		return m.Bids
	}
	return nil
}

func (m *Orderbook) GetVenueType() VenueType {
	if m != nil {
		return m.VenueType
	}
	return VenueType_SPOT
}

type Candle struct {
	Product              Product    `protobuf:"varint,1,opt,name=product,proto3,enum=marketdata.Product" json:"product,omitempty"`
	Period               Period     `protobuf:"varint,2,opt,name=period,proto3,enum=marketdata.Period" json:"period,omitempty"`
	Open                 float64    `protobuf:"fixed64,3,opt,name=open,proto3" json:"open,omitempty"`
	High                 float64    `protobuf:"fixed64,4,opt,name=high,proto3" json:"high,omitempty"`
	Low                  float64    `protobuf:"fixed64,5,opt,name=low,proto3" json:"low,omitempty"`
	Close                float64    `protobuf:"fixed64,6,opt,name=close,proto3" json:"close,omitempty"`
	Volume               float64    `protobuf:"fixed64,7,opt,name=volume,proto3" json:"volume,omitempty"`
	CandleType           CandleType `protobuf:"varint,8,opt,name=candle_type,json=candleType,proto3,enum=marketdata.CandleType" json:"candle_type,omitempty"`
	VenueType            VenueType  `protobuf:"varint,9,opt,name=venue_type,json=venueType,proto3,enum=marketdata.VenueType" json:"venue_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Candle) Reset()         { *m = Candle{} }
func (m *Candle) String() string { return proto.CompactTextString(m) }
func (*Candle) ProtoMessage()    {}
func (*Candle) Descriptor() ([]byte, []int) {
	return fileDescriptor_marketdata_a9ec38ab3d6fcd69, []int{2}
}
func (m *Candle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Candle.Unmarshal(m, b)
}
func (m *Candle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Candle.Marshal(b, m, deterministic)
}
func (dst *Candle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Candle.Merge(dst, src)
}
func (m *Candle) XXX_Size() int {
	return xxx_messageInfo_Candle.Size(m)
}
func (m *Candle) XXX_DiscardUnknown() {
	xxx_messageInfo_Candle.DiscardUnknown(m)
}

var xxx_messageInfo_Candle proto.InternalMessageInfo

func (m *Candle) GetProduct() Product {
	if m != nil {
		return m.Product
	}
	return Product_BTC_USD
}

func (m *Candle) GetPeriod() Period {
	if m != nil {
		return m.Period
	}
	return Period_PERIOD_CURRENT
}

func (m *Candle) GetOpen() float64 {
	if m != nil {
		return m.Open
	}
	return 0
}

func (m *Candle) GetHigh() float64 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *Candle) GetLow() float64 {
	if m != nil {
		return m.Low
	}
	return 0
}

func (m *Candle) GetClose() float64 {
	if m != nil {
		return m.Close
	}
	return 0
}

func (m *Candle) GetVolume() float64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *Candle) GetCandleType() CandleType {
	if m != nil {
		return m.CandleType
	}
	return CandleType_VOLUME
}

func (m *Candle) GetVenueType() VenueType {
	if m != nil {
		return m.VenueType
	}
	return VenueType_SPOT
}

type Trade struct {
	Product              Product   `protobuf:"varint,1,opt,name=product,proto3,enum=marketdata.Product" json:"product,omitempty"`
	Timestamp            uint64    `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Price                float64   `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`
	Size                 float64   `protobuf:"fixed64,4,opt,name=size,proto3" json:"size,omitempty"`
	OrderSide            OrderSide `protobuf:"varint,5,opt,name=order_side,json=orderSide,proto3,enum=marketdata.OrderSide" json:"order_side,omitempty"`
	VenueType            VenueType `protobuf:"varint,6,opt,name=venue_type,json=venueType,proto3,enum=marketdata.VenueType" json:"venue_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Trade) Reset()         { *m = Trade{} }
func (m *Trade) String() string { return proto.CompactTextString(m) }
func (*Trade) ProtoMessage()    {}
func (*Trade) Descriptor() ([]byte, []int) {
	return fileDescriptor_marketdata_a9ec38ab3d6fcd69, []int{3}
}
func (m *Trade) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trade.Unmarshal(m, b)
}
func (m *Trade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trade.Marshal(b, m, deterministic)
}
func (dst *Trade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trade.Merge(dst, src)
}
func (m *Trade) XXX_Size() int {
	return xxx_messageInfo_Trade.Size(m)
}
func (m *Trade) XXX_DiscardUnknown() {
	xxx_messageInfo_Trade.DiscardUnknown(m)
}

var xxx_messageInfo_Trade proto.InternalMessageInfo

func (m *Trade) GetProduct() Product {
	if m != nil {
		return m.Product
	}
	return Product_BTC_USD
}

func (m *Trade) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Trade) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Trade) GetSize() float64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Trade) GetOrderSide() OrderSide {
	if m != nil {
		return m.OrderSide
	}
	return OrderSide_BUY
}

func (m *Trade) GetVenueType() VenueType {
	if m != nil {
		return m.VenueType
	}
	return VenueType_SPOT
}

type Ticker struct {
	Product              Product   `protobuf:"varint,1,opt,name=product,proto3,enum=marketdata.Product" json:"product,omitempty"`
	Timestamp            uint64    `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Price                float64   `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`
	OrderSide            OrderSide `protobuf:"varint,4,opt,name=order_side,json=orderSide,proto3,enum=marketdata.OrderSide" json:"order_side,omitempty"`
	BestBid              float64   `protobuf:"fixed64,5,opt,name=best_bid,json=bestBid,proto3" json:"best_bid,omitempty"`
	BestAsk              float64   `protobuf:"fixed64,6,opt,name=best_ask,json=bestAsk,proto3" json:"best_ask,omitempty"`
	VenueType            VenueType `protobuf:"varint,7,opt,name=venue_type,json=venueType,proto3,enum=marketdata.VenueType" json:"venue_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Ticker) Reset()         { *m = Ticker{} }
func (m *Ticker) String() string { return proto.CompactTextString(m) }
func (*Ticker) ProtoMessage()    {}
func (*Ticker) Descriptor() ([]byte, []int) {
	return fileDescriptor_marketdata_a9ec38ab3d6fcd69, []int{4}
}
func (m *Ticker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ticker.Unmarshal(m, b)
}
func (m *Ticker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ticker.Marshal(b, m, deterministic)
}
func (dst *Ticker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ticker.Merge(dst, src)
}
func (m *Ticker) XXX_Size() int {
	return xxx_messageInfo_Ticker.Size(m)
}
func (m *Ticker) XXX_DiscardUnknown() {
	xxx_messageInfo_Ticker.DiscardUnknown(m)
}

var xxx_messageInfo_Ticker proto.InternalMessageInfo

func (m *Ticker) GetProduct() Product {
	if m != nil {
		return m.Product
	}
	return Product_BTC_USD
}

func (m *Ticker) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Ticker) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Ticker) GetOrderSide() OrderSide {
	if m != nil {
		return m.OrderSide
	}
	return OrderSide_BUY
}

func (m *Ticker) GetBestBid() float64 {
	if m != nil {
		return m.BestBid
	}
	return 0
}

func (m *Ticker) GetBestAsk() float64 {
	if m != nil {
		return m.BestAsk
	}
	return 0
}

func (m *Ticker) GetVenueType() VenueType {
	if m != nil {
		return m.VenueType
	}
	return VenueType_SPOT
}

func init() {
	proto.RegisterType((*Item)(nil), "marketdata.Item")
	proto.RegisterType((*Orderbook)(nil), "marketdata.Orderbook")
	proto.RegisterType((*Candle)(nil), "marketdata.Candle")
	proto.RegisterType((*Trade)(nil), "marketdata.Trade")
	proto.RegisterType((*Ticker)(nil), "marketdata.Ticker")
	proto.RegisterEnum("marketdata.Period", Period_name, Period_value)
	proto.RegisterEnum("marketdata.CandleType", CandleType_name, CandleType_value)
	proto.RegisterEnum("marketdata.OrderSide", OrderSide_name, OrderSide_value)
	proto.RegisterEnum("marketdata.Venue", Venue_name, Venue_value)
	proto.RegisterEnum("marketdata.VenueType", VenueType_name, VenueType_value)
	proto.RegisterEnum("marketdata.Symbol", Symbol_name, Symbol_value)
	proto.RegisterEnum("marketdata.Product", Product_name, Product_value)
}

func init() { proto.RegisterFile("marketdata.proto", fileDescriptor_marketdata_a9ec38ab3d6fcd69) }

var fileDescriptor_marketdata_a9ec38ab3d6fcd69 = []byte{
	// 826 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x95, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0xc7, 0x45, 0xf1, 0x4b, 0x1c, 0xd9, 0xca, 0x74, 0x93, 0xb8, 0x2c, 0x50, 0x14, 0x86, 0xd1,
	0x83, 0x21, 0x20, 0x81, 0x25, 0xdb, 0x49, 0xaf, 0x12, 0xc5, 0x54, 0x44, 0x64, 0x51, 0x58, 0x51,
	0x69, 0x72, 0x12, 0x28, 0x71, 0xd1, 0x10, 0x92, 0x4c, 0x82, 0xa4, 0x5d, 0xb8, 0x87, 0xbe, 0x41,
	0x5f, 0xa8, 0x8f, 0xd4, 0x63, 0xcf, 0x3d, 0x14, 0xbb, 0x24, 0xe5, 0xb5, 0x81, 0x02, 0x6e, 0x51,
	0xf4, 0x36, 0xbf, 0x99, 0xd9, 0xd9, 0x99, 0xd9, 0x3f, 0x25, 0xc0, 0x5d, 0x98, 0x6d, 0x58, 0x11,
	0x85, 0x45, 0xf8, 0x3a, 0xcd, 0x92, 0x22, 0x21, 0x70, 0xef, 0x39, 0xb9, 0x00, 0xcd, 0x2b, 0xd8,
	0x8e, 0x1c, 0x81, 0x11, 0xee, 0x92, 0x9b, 0xeb, 0xc2, 0x56, 0x8e, 0x95, 0x53, 0x85, 0x56, 0x44,
	0x5e, 0x80, 0x9e, 0x66, 0xf1, 0x9a, 0xd9, 0x4d, 0xe1, 0x2e, 0xe1, 0xe4, 0x0f, 0x05, 0x2c, 0x3f,
	0x8b, 0x58, 0xb6, 0x4a, 0x92, 0x0d, 0x79, 0x05, 0x66, 0x9a, 0x25, 0xd1, 0xcd, 0xba, 0x3c, 0xdc,
	0xe9, 0x3f, 0x7f, 0x2d, 0xdd, 0x39, 0x2b, 0x43, 0xb4, 0xce, 0x21, 0x5f, 0x83, 0x55, 0xc4, 0x3b,
	0x96, 0x17, 0xe1, 0x2e, 0x15, 0x65, 0x35, 0x7a, 0xef, 0xe0, 0x8d, 0x6c, 0xd9, 0x2d, 0xdb, 0xe6,
	0xb6, 0x7a, 0xac, 0x9c, 0x1e, 0xd2, 0x8a, 0xc8, 0xb7, 0xa0, 0x85, 0xf9, 0x26, 0xb7, 0xb5, 0x63,
	0xf5, 0xb4, 0xdd, 0x47, 0xf9, 0x06, 0x3e, 0x00, 0x15, 0x51, 0x9e, 0xb5, 0x8a, 0xa3, 0xdc, 0xd6,
	0xff, 0x2e, 0x8b, 0x47, 0xc9, 0x05, 0xc0, 0x2d, 0xbb, 0xbe, 0x61, 0xcb, 0xe2, 0x2e, 0x65, 0xb6,
	0x21, 0x7a, 0x7e, 0x29, 0xe7, 0x7e, 0xe0, 0xd1, 0xe0, 0x2e, 0x65, 0xd4, 0xba, 0xad, 0xcd, 0x93,
	0xdf, 0x9a, 0x60, 0x38, 0xe1, 0x75, 0xb4, 0x65, 0xff, 0x74, 0xe2, 0x2e, 0x18, 0x29, 0xcb, 0xe2,
	0x24, 0x12, 0xe3, 0x76, 0xfa, 0xe4, 0x41, 0xb6, 0x88, 0xd0, 0x2a, 0x83, 0x10, 0xd0, 0x92, 0x94,
	0x5d, 0x8b, 0xe9, 0x15, 0x2a, 0x6c, 0xee, 0xfb, 0x1c, 0xff, 0xf8, 0xd9, 0xd6, 0x4a, 0x1f, 0xb7,
	0x09, 0x82, 0xba, 0x4d, 0x7e, 0xb2, 0x75, 0xe1, 0xe2, 0x26, 0x7f, 0xaa, 0xf5, 0x36, 0xc9, 0xcb,
	0x81, 0x14, 0x5a, 0x02, 0xdf, 0xe7, 0x6d, 0xb2, 0xbd, 0xd9, 0x31, 0xdb, 0x2c, 0x1f, 0xb6, 0x24,
	0xf2, 0x16, 0xda, 0x6b, 0x31, 0x4c, 0xb9, 0x84, 0x96, 0x68, 0xec, 0x48, 0x6e, 0xac, 0x9c, 0x55,
	0x6c, 0x01, 0xd6, 0x7b, 0xfb, 0xd1, 0xf2, 0xac, 0x27, 0x2e, 0xef, 0x77, 0x05, 0xf4, 0x20, 0x0b,
	0x23, 0xf6, 0xdf, 0xaa, 0x65, 0x2f, 0x4f, 0x55, 0x92, 0x27, 0xdf, 0x57, 0x1e, 0xff, 0xcc, 0xea,
	0x7d, 0x71, 0x9b, 0xb7, 0x9d, 0x70, 0xc5, 0x2e, 0xf3, 0x38, 0x62, 0x62, 0x6d, 0x8f, 0xda, 0x16,
	0x7a, 0x9e, 0xc7, 0x11, 0xa3, 0x56, 0x52, 0x9b, 0xff, 0x52, 0x29, 0xbf, 0x36, 0xc1, 0x08, 0xe2,
	0xf5, 0x86, 0x65, 0xff, 0xc7, 0xb4, 0x0f, 0x27, 0xd3, 0x9e, 0x38, 0xd9, 0x57, 0xd0, 0x5a, 0xb1,
	0xbc, 0x58, 0xae, 0xe2, 0xa8, 0x12, 0x91, 0xc9, 0x79, 0x18, 0x47, 0xfb, 0x50, 0x98, 0x6f, 0x2a,
	0x2d, 0x89, 0xd0, 0x20, 0xdf, 0x3c, 0xda, 0x87, 0xf9, 0xb4, 0x7d, 0x74, 0xff, 0x6c, 0x82, 0x31,
	0xab, 0xe5, 0xdd, 0x99, 0xb9, 0xd4, 0xf3, 0x47, 0x4b, 0x67, 0x41, 0xa9, 0x3b, 0x0d, 0xb0, 0x41,
	0x0e, 0xc1, 0xaa, 0x7c, 0x57, 0x3d, 0x54, 0x64, 0xec, 0x63, 0x53, 0xc6, 0x73, 0x54, 0x65, 0xbc,
	0x40, 0x4d, 0xc6, 0x4b, 0xd4, 0x65, 0x7c, 0x83, 0x06, 0xe9, 0x00, 0xec, 0x2b, 0x9f, 0xa1, 0xf9,
	0x80, 0xfb, 0xd8, 0x7a, 0xc0, 0x97, 0x68, 0xc9, 0xdc, 0x3f, 0x43, 0x90, 0xf9, 0xfc, 0x0c, 0xdb,
	0x52, 0xf9, 0x71, 0x0f, 0x0f, 0x64, 0xec, 0xe3, 0xa1, 0x8c, 0xe7, 0xd8, 0x91, 0xf1, 0x02, 0x9f,
	0xc9, 0x78, 0x89, 0x28, 0xe3, 0x1b, 0xfc, 0x42, 0xc6, 0xb7, 0x48, 0x64, 0xfc, 0x0e, 0x9f, 0x4b,
	0x7d, 0x8c, 0x7b, 0x7d, 0x7c, 0x21, 0x85, 0x47, 0x3d, 0x7c, 0x29, 0xe1, 0x0f, 0x3d, 0x3c, 0x92,
	0xbb, 0x9e, 0xf6, 0xf0, 0xcb, 0xee, 0x2b, 0x80, 0xfb, 0x6f, 0x99, 0x00, 0x18, 0x1f, 0xfc, 0xc9,
	0xe2, 0xca, 0xc5, 0x06, 0xb1, 0x40, 0x0f, 0xe8, 0x60, 0xe4, 0x62, 0x93, 0xb4, 0x40, 0x1b, 0xfa,
	0xfe, 0x7b, 0x54, 0xbb, 0xdf, 0x54, 0xbf, 0xed, 0x42, 0x26, 0x26, 0xa8, 0xc3, 0xc5, 0x27, 0x6c,
	0xf0, 0xf8, 0xdc, 0x9d, 0x4c, 0x50, 0xe9, 0x7e, 0x02, 0x5d, 0xbc, 0x32, 0x39, 0x80, 0xd6, 0x68,
	0x40, 0xdf, 0xcf, 0x7c, 0x7f, 0x82, 0x0d, 0xf2, 0x0c, 0xda, 0x8e, 0xef, 0x4d, 0x87, 0x83, 0xb9,
	0x3b, 0xa3, 0x3e, 0x2a, 0xa4, 0x0d, 0xe6, 0xd0, 0x9b, 0x0e, 0xa6, 0x0e, 0x2f, 0x7f, 0x00, 0xad,
	0xa1, 0x17, 0xbc, 0xf3, 0xa6, 0xee, 0x47, 0x54, 0x79, 0x0f, 0x43, 0x2f, 0xb8, 0x72, 0x3f, 0xa2,
	0xc6, 0xed, 0xef, 0xdd, 0x2b, 0x6f, 0xea, 0xa1, 0xde, 0x3d, 0x01, 0x6b, 0x2f, 0x20, 0x71, 0xe3,
	0xcc, 0xe7, 0x02, 0x69, 0x83, 0xf9, 0x6e, 0x11, 0x2c, 0xa8, 0x3b, 0x47, 0xa5, 0x3b, 0x06, 0x63,
	0x7e, 0xb7, 0x5b, 0x25, 0x5b, 0xde, 0xdb, 0x62, 0x3e, 0xc2, 0x86, 0x68, 0x32, 0x70, 0x50, 0xe1,
	0x86, 0x1b, 0x8c, 0xb1, 0x29, 0x3c, 0xce, 0x18, 0x55, 0x6e, 0x4c, 0x02, 0x07, 0x35, 0x11, 0xf2,
	0xe7, 0xa8, 0xf3, 0xb2, 0x8b, 0xf9, 0x28, 0x40, 0xa3, 0xfb, 0x0b, 0x98, 0xd5, 0x07, 0x28, 0x7a,
	0x0d, 0x9c, 0x65, 0x59, 0xae, 0x02, 0x5e, 0x49, 0x4c, 0xe1, 0x06, 0x63, 0x11, 0x69, 0x72, 0x98,
	0x54, 0x69, 0x6a, 0x0d, 0x43, 0x51, 0xbe, 0x02, 0x7e, 0x46, 0x17, 0x05, 0x9c, 0xf2, 0x8c, 0x51,
	0x03, 0x4f, 0x33, 0x6b, 0xe0, 0x69, 0xad, 0x95, 0x21, 0xfe, 0x8e, 0xcf, 0xff, 0x0a, 0x00, 0x00,
	0xff, 0xff, 0x03, 0xf1, 0x43, 0x41, 0xa2, 0x07, 0x00, 0x00,
}
